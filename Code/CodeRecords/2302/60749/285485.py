

#include<bits/stdc++.h>
using namespace std;
struct LCA{        map<int,map<int,int>>mp;       void initMap(int root,int* lc,int* rc)    {        if(!root) return;        map<int,int>map_;        mp.insert(make_pair(root,map_));        initMap(lc[root],lc,rc);        initMap(rc[root],lc,rc);    }        void setMap(int root,int* lc,int* rc)    {        if(!root) return;              headRecord(lc[root],root,lc,rc);        headRecord(rc[root],root,lc,rc);              subRecord(root,lc,rc);             setMap(lc[root],lc,rc);        setMap(rc[root],lc,rc);    }    void headRecord(int n,int h,int* lc,int* rc)    {        if(!n) return ;        mp[n].insert(make_pair(h,h));        headRecord(lc[n],h,lc,rc);        headRecord(rc[n],h,lc,rc);    }    void subRecord(int h,int* lc,int* rc)    {        if(!h) return;        preLeft(lc[h],rc[h],h,lc,rc);        subRecord(lc[h],lc,rc);        subRecord(rc[h],lc,rc);    }    void preLeft(int l,int r,int h,int* lc,int* rc)    {        if(!l) return;        preRight(l,r,h,lc,rc);        preLeft(lc[l],r,h,lc,rc);        preLeft(rc[l],r,h,lc,rc);    }    void preRight(int l,int r,int h,int* lc,int* rc)    {        if(!r) return;        mp[l].insert(make_pair(r,h));        preRight(l,lc[r],h,lc,rc);        preRight(l,rc[r],h,lc,rc);    }    int query(int a,int b)    {         if(mp[a].find(b)!=mp[a].end())            return mp[a][b];        if(mp[b].find(a)!=mp[b].end())            return mp[b][a];    }};
    int main(){    int n,root;        scanf("%d %d",&n,&root);    int p;    int* lc = new int[n+1];    int* rc = new int[n+1];    for(int i=0;i<n;++i)    {        scanf("%d",&p);        scanf("%d %d",&lc[p],&rc[p]);    }    LCA* lca = new LCA();    lca->initMap(root,lc,rc);    lca->setMap(root,lc,rc);    int m;       scanf("%d",&m);    int a,b;    while(m--)    {                      scanf("%d %d",&a,&b);        printf("%d\n",lca->query(a,b));    }    return 0;}